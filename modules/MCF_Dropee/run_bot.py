#!/usr/bin/env python3
# Script Principal de Execu√ß√£o - Dropee Bot Standalone
# Oferece m√∫ltiplas op√ß√µes de execu√ß√£o

import sys
import os
import time
import argparse
import asyncio
from pathlib import Path

# Adicionar o diret√≥rio atual ao path
MODULE_DIR = Path(__file__).resolve().parent
sys.path.append(str(MODULE_DIR))

def print_banner():
    """Exibir banner principal"""
    print("ü§ñ DROPEE BOT STANDALONE")
    print("=" * 50)
    print("Vers√£o: 2.0 | Autor: Baseado no trabalho do MasterkinG32")
    print("=" * 50)

def check_files():
    """Verificar se arquivos necess√°rios existem"""
    required_files = [
        "standalone_bot.py",
        "advanced_standalone_bot.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not (MODULE_DIR / file).exists():
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Arquivos necess√°rios n√£o encontrados:")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        print("\nüí° Execute o install.py primeiro")
        return False
    
    return True

def run_simple_bot():
    """Executar bot simples"""
    print("üöÄ Executando bot simples...")
    try:
        from standalone_bot import run_bot
        asyncio.run(run_bot())
    except ImportError as e:
        print(f"‚ùå Erro ao importar bot simples: {e}")
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o: {e}")

def run_advanced_bot():
    """Executar bot avan√ßado"""
    print("üöÄ Executando bot avan√ßado...")
    try:
        from advanced_standalone_bot import run_advanced_bot
        asyncio.run(run_advanced_bot())
    except ImportError as e:
        print(f"‚ùå Erro ao importar bot avan√ßado: {e}")
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o: {e}")

def show_stats():
    """Mostrar estat√≠sticas"""
    try:
        from advanced_standalone_bot import show_stats
        show_stats()
    except ImportError:
        print("‚ùå M√≥dulo de estat√≠sticas n√£o dispon√≠vel")
    except Exception as e:
        print(f"‚ùå Erro ao mostrar estat√≠sticas: {e}")

def run_continuous(bot_type="advanced", interval=3600):
    """Executar bot continuamente"""
    print(f"üîÑ Executando bot {bot_type} continuamente (intervalo: {interval}s)")
    print("‚ö†Ô∏è  Use Ctrl+C para parar")
    
    cycle = 1
    
    try:
        while True:
            print(f"\nüîÑ CICLO {cycle} - {time.strftime('%Y-%m-%d %H:%M:%S')}")
            
            if bot_type == "simple":
                run_simple_bot()
            else:
                run_advanced_bot()
            
            print(f"\n‚è≥ Aguardando {interval}s at√© o pr√≥ximo ciclo...")
            print(f"üìÖ Pr√≥xima execu√ß√£o: {time.strftime('%H:%M:%S', time.localtime(time.time() + interval))}")
            
            time.sleep(interval)
            cycle += 1
            
    except KeyboardInterrupt:
        print(f"\nüõë Bot parado pelo usu√°rio ap√≥s {cycle-1} ciclos")

def show_menu():
    """Mostrar menu interativo"""
    while True:
        print("\n" + "=" * 50)
        print("üìã MENU PRINCIPAL")
        print("=" * 50)
        print("1Ô∏è‚É£  Executar Bot Simples")
        print("2Ô∏è‚É£  Executar Bot Avan√ßado")
        print("3Ô∏è‚É£  Executar Continuamente (Avan√ßado)")
        print("4Ô∏è‚É£  Executar Continuamente (Simples)")
        print("5Ô∏è‚É£  Ver Estat√≠sticas")
        print("6Ô∏è‚É£  Configura√ß√µes")
        print("0Ô∏è‚É£  Sair")
        print("=" * 50)
        
        try:
            choice = input("üëâ Escolha uma op√ß√£o: ").strip()
            
            if choice == "1":
                run_simple_bot()
            elif choice == "2":
                run_advanced_bot()
            elif choice == "3":
                interval = input("‚è∞ Intervalo em segundos (padr√£o 3600): ").strip()
                interval = int(interval) if interval.isdigit() else 3600
                run_continuous("advanced", interval)
            elif choice == "4":
                interval = input("‚è∞ Intervalo em segundos (padr√£o 3600): ").strip()
                interval = int(interval) if interval.isdigit() else 3600
                run_continuous("simple", interval)
            elif choice == "5":
                show_stats()
            elif choice == "6":
                show_config_menu()
            elif choice == "0":
                print("üëã At√© logo!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
                
        except KeyboardInterrupt:
            print("\nüëã At√© logo!")
            break
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido!")

def show_config_menu():
    """Mostrar menu de configura√ß√µes"""
    print("\nüìÅ ARQUIVOS DE CONFIGURA√á√ÉO")
    print("-" * 30)
    
    config_files = [
        ("accounts.json", "Contas do Telegram"),
        ("config.json", "Configura√ß√µes do bot"),
        ("tokens.json", "Tokens salvos"),
        ("stats.json", "Estat√≠sticas")
    ]
    
    for file, description in config_files:
        file_path = MODULE_DIR / file
        status = "‚úÖ Existe" if file_path.exists() else "‚ùå N√£o existe"
        size = f"({file_path.stat().st_size} bytes)" if file_path.exists() else ""
        print(f"‚Ä¢ {file:<15} - {description:<20} {status} {size}")
    
    print("\nüí° DICAS:")
    print("‚Ä¢ Copie accounts_example.json para accounts.json")
    print("‚Ä¢ Configure seus dados do Telegram em accounts.json")
    print("‚Ä¢ Ajuste configura√ß√µes em config.json")

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(
        description="Dropee Bot Standalone - Script de Execu√ß√£o",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        "mode",
        nargs="?",
        choices=["simple", "advanced", "stats", "continuous", "menu"],
        default="menu",
        help="Modo de execu√ß√£o"
    )
    
    parser.add_argument(
        "--interval",
        type=int,
        default=3600,
        help="Intervalo para modo cont√≠nuo (segundos)"
    )
    
    parser.add_argument(
        "--bot-type",
        choices=["simple", "advanced"],
        default="advanced",
        help="Tipo de bot para modo cont√≠nuo"
    )
    
    args = parser.parse_args()
    
    # Configurar encoding
    try:
        if sys.stdout.encoding.lower() != "utf-8":
            sys.stdout.reconfigure(encoding="utf-8")
    except:
        pass
    
    print_banner()
    
    # Verificar arquivos
    if not check_files():
        return
    
    # Executar modo escolhido
    try:
        if args.mode == "simple":
            run_simple_bot()
        elif args.mode == "advanced":
            run_advanced_bot()
        elif args.mode == "stats":
            show_stats()
        elif args.mode == "continuous":
            run_continuous(args.bot_type, args.interval)
        else:  # menu
            show_menu()
            
    except KeyboardInterrupt:
        print("\nüëã Programa interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    main()